from random import randint
# Задача 22: Даны два неупорядоченных набора целых чисел 
# (может быть, с повторениями). Выдать без повторений в 
# порядке возрастания все те числа, которые встречаются в 
# обоих наборах.
# Пользователь вводит 2 числа. n - кол-во элементов первого 
# множества. m - кол-во элементов второго множества. 
# Затем пользователь вводит сами элементы множеств.




def set_comparison():
    n = int(input('Введите количество элементов первого множества '))
    m = int(input('Введите количество элементов второго множества '))
    first_comparison = set()
    second_comparison = set()
    for i in range(n):
        first_comparison.add(int(input(f'ВВедите {i}-ю переменную первого множества ')))
    for i in range(m):
        second_comparison.add(int(input(f'ВВедите {i}-ю переменную второго множества ')))
    print(f'Первое множество {first_comparison}')
    print(f'Второе множество {second_comparison}')
    first_comparison.intersection_update(second_comparison)
    print(f'Элементы встречающиеся в обоих набороах {first_comparison}')
    


# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. 
# Она растет на круглой грядке, причем кусты высажены только по окружности. 
# Таким образом, у каждого куста есть ровно два соседних. 
# Всего на грядке растет N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на 
# них выросло различное число ягод – на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники. 
# Эта система состоит из управляющего модуля и нескольких собирающих модулей. 
# Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом,
#  собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод,
#  которое может собрать за один заход собирающий модуль, 
# находясь перед некоторым кустом заданной во входном файле грядки.

def max_blueberry():
    bushes = int(input())
    garden_bed = list()
    for i in range(bushes):
        garden_bed.append(int(i+1))
    blueberry = list()
    for i in range(len(garden_bed) - 1 ):
        blueberry.append(garden_bed[i-1] + garden_bed[i] + garden_bed[i+1])
    blueberry.append(garden_bed[-2] + garden_bed[-1] + garden_bed[0])
    print(max(blueberry))



def main():
    set_comparison()
    max_blueberry()



if __name__ == '__main__':
    main()
